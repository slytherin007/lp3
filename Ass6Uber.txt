import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score,mean_squared_error

data = pd.read_csv('uber.csv')

df = pd.DataFrame(data)

df

df.copy()

df.head()

df.describe()

df.info()

df.isnull().sum()

df.dropna(inplace=True)

correlation_matrix = df.corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.show()

plt.figure(figsize = (8,6))
plt.boxplot(df['fare_amount'])
plt.title("Box Plot for Outlier Detection")
plt.show()

Q1 = data['fare_amount'].quantile(0.01)
Q3 = data['fare_amount'].quantile(0.99)
df = df[((data['fare_amount'] < Q1) | (data['fare_amount'] > Q3))]

df.isnull().sum()

x = df.drop('fare_amount',axis = 1)
y = df['fare_amount']
x['pickup_datetime'] = pd.to_numeric(pd.to_datetime(x['pickup_datetime']))
x = x.loc[:, x.columns.str.contains('^Unnamed')]

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state=42)

linear_model = LinearRegression()
linear_model.fit(x_train, y_train)

pre = linear_model.predict(x_test)
pre

plt.scatter(pre, y_test)
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.title("Actual vs. Predicted Values")
plt.show()
# plt.scatter(x_train, y_train,color="red") 
# plt.plot(x_test, linear_model.predict(x_test),color="green")Â 
# plt.show()

r2 = r2_score(y_test, pre)
print("R2 : ",r2)

rmse = np.sqrt(mean_squared_error(pre, y_test))
print("RMSE : ", rmse)

random_forest_model = RandomForestRegressor(n_estimators = 100, random_state = 101)

random_forest_model.fit(x_train, y_train)

random_forest_model_pre = random_forest_model.predict(x_test)
random_forest_model_pre

plt.scatter(y_test, random_forest_model_pre)
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.title("Actual vs. Predicted Values")
plt.show()

r2 = r2_score(y_test, random_forest_model_pre)
print("R2 : ",r2)

rmse = np.sqrt(mean_squared_error(random_forest_model_pre, y_test))
print("RMSE : ", rmse)

df.corr()